/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import de.tu_bs.cs.isf.mbse.mbtimes.services.NplGrammarAccess;

public class NplParser extends AbstractContentAssistParser {
	
	@Inject
	private NplGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal.InternalNplParser createParser() {
		de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal.InternalNplParser result = new de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal.InternalNplParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getDeclarationAccess().getGroup(), "rule__Declaration__Group__0");
					put(grammarAccess.getFeedlinksAccess().getGroup(), "rule__Feedlinks__Group__0");
					put(grammarAccess.getFeedlinksAccess().getGroup_2(), "rule__Feedlinks__Group_2__0");
					put(grammarAccess.getPairAccess().getGroup(), "rule__Pair__Group__0");
					put(grammarAccess.getDeclarationAccess().getNameAssignment_1(), "rule__Declaration__NameAssignment_1");
					put(grammarAccess.getDeclarationAccess().getFeedlinksAssignment_3(), "rule__Declaration__FeedlinksAssignment_3");
					put(grammarAccess.getFeedlinksAccess().getPairsAssignment_1(), "rule__Feedlinks__PairsAssignment_1");
					put(grammarAccess.getFeedlinksAccess().getPairsAssignment_2_1(), "rule__Feedlinks__PairsAssignment_2_1");
					put(grammarAccess.getPairAccess().getKeyAssignment_1(), "rule__Pair__KeyAssignment_1");
					put(grammarAccess.getPairAccess().getValueAssignment_2(), "rule__Pair__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal.InternalNplParser typedParser = (de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal.InternalNplParser) parser;
			typedParser.entryRuleDeclaration();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public NplGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(NplGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

/*
 * generated by Xtext
 */
grammar InternalNpl;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.tu_bs.cs.isf.mbse.mbtimes.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import de.tu_bs.cs.isf.mbse.mbtimes.services.NplGrammarAccess;

}

@parser::members {
 
 	private NplGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(NplGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleDeclaration
entryRuleDeclaration 
:
{ before(grammarAccess.getDeclarationRule()); }
	 ruleDeclaration
{ after(grammarAccess.getDeclarationRule()); } 
	 EOF 
;

// Rule Declaration
ruleDeclaration
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDeclarationAccess().getGroup()); }
(rule__Declaration__Group__0)
{ after(grammarAccess.getDeclarationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFeedlinks
entryRuleFeedlinks 
:
{ before(grammarAccess.getFeedlinksRule()); }
	 ruleFeedlinks
{ after(grammarAccess.getFeedlinksRule()); } 
	 EOF 
;

// Rule Feedlinks
ruleFeedlinks
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFeedlinksAccess().getGroup()); }
(rule__Feedlinks__Group__0)
{ after(grammarAccess.getFeedlinksAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePair
entryRulePair 
:
{ before(grammarAccess.getPairRule()); }
	 rulePair
{ after(grammarAccess.getPairRule()); } 
	 EOF 
;

// Rule Pair
rulePair
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPairAccess().getGroup()); }
(rule__Pair__Group__0)
{ after(grammarAccess.getPairAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Declaration__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__0__Impl
	rule__Declaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNewspaperKeyword_0()); }

	'newspaper' 

{ after(grammarAccess.getDeclarationAccess().getNewspaperKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__1__Impl
	rule__Declaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameAssignment_1()); }
(rule__Declaration__NameAssignment_1)
{ after(grammarAccess.getDeclarationAccess().getNameAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__2__Impl
	rule__Declaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFeedlinkKeyword_2()); }

	'feedlink' 

{ after(grammarAccess.getDeclarationAccess().getFeedlinkKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Declaration__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Declaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFeedlinksAssignment_3()); }
(rule__Declaration__FeedlinksAssignment_3)
{ after(grammarAccess.getDeclarationAccess().getFeedlinksAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Feedlinks__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group__0__Impl
	rule__Feedlinks__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getFeedlinksAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feedlinks__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group__1__Impl
	rule__Feedlinks__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getPairsAssignment_1()); }
(rule__Feedlinks__PairsAssignment_1)
{ after(grammarAccess.getFeedlinksAccess().getPairsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feedlinks__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group__2__Impl
	rule__Feedlinks__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getGroup_2()); }
(rule__Feedlinks__Group_2__0)*
{ after(grammarAccess.getFeedlinksAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feedlinks__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getFeedlinksAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Feedlinks__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group_2__0__Impl
	rule__Feedlinks__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getCommaSpaceKeyword_2_0()); }

	', ' 

{ after(grammarAccess.getFeedlinksAccess().getCommaSpaceKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Feedlinks__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Feedlinks__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getPairsAssignment_2_1()); }
(rule__Feedlinks__PairsAssignment_2_1)
{ after(grammarAccess.getFeedlinksAccess().getPairsAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Pair__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__0__Impl
	rule__Pair__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getLeftCurlyBracketKeyword_0()); }

	'{' 

{ after(grammarAccess.getPairAccess().getLeftCurlyBracketKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__1__Impl
	rule__Pair__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getKeyAssignment_1()); }
(rule__Pair__KeyAssignment_1)
{ after(grammarAccess.getPairAccess().getKeyAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__2__Impl
	rule__Pair__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueAssignment_2()); }
(rule__Pair__ValueAssignment_2)
{ after(grammarAccess.getPairAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Pair__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Pair__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getRightCurlyBracketKeyword_3()); }

	'}' 

{ after(grammarAccess.getPairAccess().getRightCurlyBracketKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Declaration__NameAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getNameSTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getDeclarationAccess().getNameSTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Declaration__FeedlinksAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDeclarationAccess().getFeedlinksFeedlinksParserRuleCall_3_0()); }
	ruleFeedlinks{ after(grammarAccess.getDeclarationAccess().getFeedlinksFeedlinksParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__PairsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getPairsPairParserRuleCall_1_0()); }
	rulePair{ after(grammarAccess.getFeedlinksAccess().getPairsPairParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Feedlinks__PairsAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFeedlinksAccess().getPairsPairParserRuleCall_2_1_0()); }
	rulePair{ after(grammarAccess.getFeedlinksAccess().getPairsPairParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__KeyAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getKeySTRINGTerminalRuleCall_1_0()); }
	RULE_STRING{ after(grammarAccess.getPairAccess().getKeySTRINGTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Pair__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



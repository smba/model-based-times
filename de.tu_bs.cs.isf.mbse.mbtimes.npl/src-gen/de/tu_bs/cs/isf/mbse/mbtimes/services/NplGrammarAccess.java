/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.mbse.mbtimes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewspaperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFeedlinkKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFeedlinksAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFeedlinksFeedlinksParserRuleCall_3_0 = (RuleCall)cFeedlinksAssignment_3.eContents().get(0);
		
		//Declaration:
		//	"newspaper" name=STRING "feedlink" feedlinks=Feedlinks;
		@Override public ParserRule getRule() { return rule; }

		//"newspaper" name=STRING "feedlink" feedlinks=Feedlinks
		public Group getGroup() { return cGroup; }

		//"newspaper"
		public Keyword getNewspaperKeyword_0() { return cNewspaperKeyword_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }

		//"feedlink"
		public Keyword getFeedlinkKeyword_2() { return cFeedlinkKeyword_2; }

		//feedlinks=Feedlinks
		public Assignment getFeedlinksAssignment_3() { return cFeedlinksAssignment_3; }

		//Feedlinks
		public RuleCall getFeedlinksFeedlinksParserRuleCall_3_0() { return cFeedlinksFeedlinksParserRuleCall_3_0; }
	}

	public class FeedlinksElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Feedlinks");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPairsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_1_0 = (RuleCall)cPairsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaSpaceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPairsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_2_1_0 = (RuleCall)cPairsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Feedlinks:
		//	"{" pairs+=Pair (", " pairs+=Pair)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" pairs+=Pair (", " pairs+=Pair)* "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_1() { return cPairsAssignment_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_1_0() { return cPairsPairParserRuleCall_1_0; }

		//(", " pairs+=Pair)*
		public Group getGroup_2() { return cGroup_2; }

		//", "
		public Keyword getCommaSpaceKeyword_2_0() { return cCommaSpaceKeyword_2_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_2_1() { return cPairsAssignment_2_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_2_1_0() { return cPairsPairParserRuleCall_2_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cKeyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cKeySTRINGTerminalRuleCall_1_0 = (RuleCall)cKeyAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Pair:
		//	"{" key=STRING value=STRING "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" key=STRING value=STRING "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//key=STRING
		public Assignment getKeyAssignment_1() { return cKeyAssignment_1; }

		//STRING
		public RuleCall getKeySTRINGTerminalRuleCall_1_0() { return cKeySTRINGTerminalRuleCall_1_0; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final DeclarationElements pDeclaration;
	private final FeedlinksElements pFeedlinks;
	private final PairElements pPair;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDeclaration = new DeclarationElements();
		this.pFeedlinks = new FeedlinksElements();
		this.pPair = new PairElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.cs.isf.mbse.mbtimes.Npl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Declaration:
	//	"newspaper" name=STRING "feedlink" feedlinks=Feedlinks;
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//Feedlinks:
	//	"{" pairs+=Pair (", " pairs+=Pair)* "}";
	public FeedlinksElements getFeedlinksAccess() {
		return pFeedlinks;
	}
	
	public ParserRule getFeedlinksRule() {
		return getFeedlinksAccess().getRule();
	}

	//Pair:
	//	"{" key=STRING value=STRING "}";
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.mbse.mbtimes.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class NplGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNewspaperKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFeedLinksKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cFeedlinksAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFeedlinksPairParserRuleCall_5_0 = (RuleCall)cFeedlinksAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaSpaceKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cPairsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cPairsPairParserRuleCall_6_1_0 = (RuleCall)cPairsAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cTopicsKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cTopicsAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cTopicsTopicParserRuleCall_10_0 = (RuleCall)cTopicsAssignment_10.eContents().get(0);
		private final Assignment cTopicsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cTopicsTopicParserRuleCall_11_0 = (RuleCall)cTopicsAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cDateKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cDateAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cDateDateParserRuleCall_13_1_0 = (RuleCall)cDateAssignment_13_1.eContents().get(0);
		private final Group cGroup_14 = (Group)cGroup.eContents().get(14);
		private final Keyword cLocationKeyword_14_0 = (Keyword)cGroup_14.eContents().get(0);
		private final Assignment cLocationAssignment_14_1 = (Assignment)cGroup_14.eContents().get(1);
		private final RuleCall cLocationSTRINGTerminalRuleCall_14_1_0 = (RuleCall)cLocationAssignment_14_1.eContents().get(0);
		private final Keyword cPriceKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cPriceAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final RuleCall cPricePriceParserRuleCall_16_0 = (RuleCall)cPriceAssignment_16.eContents().get(0);
		private final Group cGroup_17 = (Group)cGroup.eContents().get(17);
		private final Keyword cVolumeKeyword_17_0 = (Keyword)cGroup_17.eContents().get(0);
		private final Assignment cVolumeAssignment_17_1 = (Assignment)cGroup_17.eContents().get(1);
		private final RuleCall cVolumeINTTerminalRuleCall_17_1_0 = (RuleCall)cVolumeAssignment_17_1.eContents().get(0);
		private final Keyword cLanguageKeyword_18 = (Keyword)cGroup.eContents().get(18);
		private final Assignment cLanguageAssignment_19 = (Assignment)cGroup.eContents().get(19);
		private final RuleCall cLanguageLanguageParserRuleCall_19_0 = (RuleCall)cLanguageAssignment_19.eContents().get(0);
		private final Keyword cFormatKeyword_20 = (Keyword)cGroup.eContents().get(20);
		private final Assignment cFormatAssignment_21 = (Assignment)cGroup.eContents().get(21);
		private final RuleCall cFormatFormatParserRuleCall_21_0 = (RuleCall)cFormatAssignment_21.eContents().get(0);
		private final Keyword cNumberOfArticlesPerTopicKeyword_22 = (Keyword)cGroup.eContents().get(22);
		private final Assignment cArticleCntAssignment_23 = (Assignment)cGroup.eContents().get(23);
		private final RuleCall cArticleCntINTTerminalRuleCall_23_0 = (RuleCall)cArticleCntAssignment_23.eContents().get(0);
		private final Keyword cNumberOfWordsPerArticleKeyword_24 = (Keyword)cGroup.eContents().get(24);
		private final Assignment cArticleCharMinAssignment_25 = (Assignment)cGroup.eContents().get(25);
		private final RuleCall cArticleCharMinINTTerminalRuleCall_25_0 = (RuleCall)cArticleCharMinAssignment_25.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_26 = (Keyword)cGroup.eContents().get(26);
		private final Assignment cArticleCharMaxAssignment_27 = (Assignment)cGroup.eContents().get(27);
		private final RuleCall cArticleCharMaxINTTerminalRuleCall_27_0 = (RuleCall)cArticleCharMaxAssignment_27.eContents().get(0);
		private final Group cGroup_28 = (Group)cGroup.eContents().get(28);
		private final Keyword cNumberOfImagesPerArticleKeyword_28_0 = (Keyword)cGroup_28.eContents().get(0);
		private final Assignment cImagesCntAssignment_28_1 = (Assignment)cGroup_28.eContents().get(1);
		private final RuleCall cImagesCntINTTerminalRuleCall_28_1_0 = (RuleCall)cImagesCntAssignment_28_1.eContents().get(0);
		private final Keyword cNumberOfColumnsKeyword_29 = (Keyword)cGroup.eContents().get(29);
		private final Assignment cColumnsCntAssignment_30 = (Assignment)cGroup.eContents().get(30);
		private final RuleCall cColumnsCntINTTerminalRuleCall_30_0 = (RuleCall)cColumnsCntAssignment_30.eContents().get(0);
		private final Keyword cFontSizeKeyword_31 = (Keyword)cGroup.eContents().get(31);
		private final Assignment cFontSizeAssignment_32 = (Assignment)cGroup.eContents().get(32);
		private final RuleCall cFontSizeFontSizeParserRuleCall_32_0 = (RuleCall)cFontSizeAssignment_32.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_33 = (Keyword)cGroup.eContents().get(33);
		
		//Declaration:
		//	"newspaper" name=ID "{" "feed links" "{" feedlinks+=Pair (", " pairs+=Pair)* "}" "topics" "{" topics+=Topic
		//	topics+=Topic* "}" ("date" date=Date)? ("location" location=STRING)? "price" price=Price ("volume" volume=INT)?
		//	"language" language=Language "format" format=Format "number of articles per topic" articleCnt=INT
		//	"number of words per article" articleCharMin=INT "-" articleCharMax=INT ("number of images per article"
		//	imagesCnt=INT)? "number of columns" columnsCnt=INT "font size" fontSize=FontSize "}";
		@Override public ParserRule getRule() { return rule; }

		//"newspaper" name=ID "{" "feed links" "{" feedlinks+=Pair (", " pairs+=Pair)* "}" "topics" "{" topics+=Topic
		//topics+=Topic* "}" ("date" date=Date)? ("location" location=STRING)? "price" price=Price ("volume" volume=INT)?
		//"language" language=Language "format" format=Format "number of articles per topic" articleCnt=INT
		//"number of words per article" articleCharMin=INT "-" articleCharMax=INT ("number of images per article" imagesCnt=INT)?
		//"number of columns" columnsCnt=INT "font size" fontSize=FontSize "}"
		public Group getGroup() { return cGroup; }

		//"newspaper"
		public Keyword getNewspaperKeyword_0() { return cNewspaperKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"feed links"
		public Keyword getFeedLinksKeyword_3() { return cFeedLinksKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//feedlinks+=Pair
		public Assignment getFeedlinksAssignment_5() { return cFeedlinksAssignment_5; }

		//Pair
		public RuleCall getFeedlinksPairParserRuleCall_5_0() { return cFeedlinksPairParserRuleCall_5_0; }

		//(", " pairs+=Pair)*
		public Group getGroup_6() { return cGroup_6; }

		//", "
		public Keyword getCommaSpaceKeyword_6_0() { return cCommaSpaceKeyword_6_0; }

		//pairs+=Pair
		public Assignment getPairsAssignment_6_1() { return cPairsAssignment_6_1; }

		//Pair
		public RuleCall getPairsPairParserRuleCall_6_1_0() { return cPairsPairParserRuleCall_6_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"topics"
		public Keyword getTopicsKeyword_8() { return cTopicsKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//topics+=Topic
		public Assignment getTopicsAssignment_10() { return cTopicsAssignment_10; }

		//Topic
		public RuleCall getTopicsTopicParserRuleCall_10_0() { return cTopicsTopicParserRuleCall_10_0; }

		//topics+=Topic*
		public Assignment getTopicsAssignment_11() { return cTopicsAssignment_11; }

		//Topic
		public RuleCall getTopicsTopicParserRuleCall_11_0() { return cTopicsTopicParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }

		//("date" date=Date)?
		public Group getGroup_13() { return cGroup_13; }

		//"date"
		public Keyword getDateKeyword_13_0() { return cDateKeyword_13_0; }

		//date=Date
		public Assignment getDateAssignment_13_1() { return cDateAssignment_13_1; }

		//Date
		public RuleCall getDateDateParserRuleCall_13_1_0() { return cDateDateParserRuleCall_13_1_0; }

		//("location" location=STRING)?
		public Group getGroup_14() { return cGroup_14; }

		//"location"
		public Keyword getLocationKeyword_14_0() { return cLocationKeyword_14_0; }

		//location=STRING
		public Assignment getLocationAssignment_14_1() { return cLocationAssignment_14_1; }

		//STRING
		public RuleCall getLocationSTRINGTerminalRuleCall_14_1_0() { return cLocationSTRINGTerminalRuleCall_14_1_0; }

		//"price"
		public Keyword getPriceKeyword_15() { return cPriceKeyword_15; }

		//price=Price
		public Assignment getPriceAssignment_16() { return cPriceAssignment_16; }

		//Price
		public RuleCall getPricePriceParserRuleCall_16_0() { return cPricePriceParserRuleCall_16_0; }

		//("volume" volume=INT)?
		public Group getGroup_17() { return cGroup_17; }

		//"volume"
		public Keyword getVolumeKeyword_17_0() { return cVolumeKeyword_17_0; }

		//volume=INT
		public Assignment getVolumeAssignment_17_1() { return cVolumeAssignment_17_1; }

		//INT
		public RuleCall getVolumeINTTerminalRuleCall_17_1_0() { return cVolumeINTTerminalRuleCall_17_1_0; }

		//"language"
		public Keyword getLanguageKeyword_18() { return cLanguageKeyword_18; }

		//language=Language
		public Assignment getLanguageAssignment_19() { return cLanguageAssignment_19; }

		//Language
		public RuleCall getLanguageLanguageParserRuleCall_19_0() { return cLanguageLanguageParserRuleCall_19_0; }

		//"format"
		public Keyword getFormatKeyword_20() { return cFormatKeyword_20; }

		//format=Format
		public Assignment getFormatAssignment_21() { return cFormatAssignment_21; }

		//Format
		public RuleCall getFormatFormatParserRuleCall_21_0() { return cFormatFormatParserRuleCall_21_0; }

		//"number of articles per topic"
		public Keyword getNumberOfArticlesPerTopicKeyword_22() { return cNumberOfArticlesPerTopicKeyword_22; }

		//articleCnt=INT
		public Assignment getArticleCntAssignment_23() { return cArticleCntAssignment_23; }

		//INT
		public RuleCall getArticleCntINTTerminalRuleCall_23_0() { return cArticleCntINTTerminalRuleCall_23_0; }

		//"number of words per article"
		public Keyword getNumberOfWordsPerArticleKeyword_24() { return cNumberOfWordsPerArticleKeyword_24; }

		//articleCharMin=INT
		public Assignment getArticleCharMinAssignment_25() { return cArticleCharMinAssignment_25; }

		//INT
		public RuleCall getArticleCharMinINTTerminalRuleCall_25_0() { return cArticleCharMinINTTerminalRuleCall_25_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_26() { return cHyphenMinusKeyword_26; }

		//articleCharMax=INT
		public Assignment getArticleCharMaxAssignment_27() { return cArticleCharMaxAssignment_27; }

		//INT
		public RuleCall getArticleCharMaxINTTerminalRuleCall_27_0() { return cArticleCharMaxINTTerminalRuleCall_27_0; }

		//("number of images per article" imagesCnt=INT)?
		public Group getGroup_28() { return cGroup_28; }

		//"number of images per article"
		public Keyword getNumberOfImagesPerArticleKeyword_28_0() { return cNumberOfImagesPerArticleKeyword_28_0; }

		//imagesCnt=INT
		public Assignment getImagesCntAssignment_28_1() { return cImagesCntAssignment_28_1; }

		//INT
		public RuleCall getImagesCntINTTerminalRuleCall_28_1_0() { return cImagesCntINTTerminalRuleCall_28_1_0; }

		//"number of columns"
		public Keyword getNumberOfColumnsKeyword_29() { return cNumberOfColumnsKeyword_29; }

		//columnsCnt=INT
		public Assignment getColumnsCntAssignment_30() { return cColumnsCntAssignment_30; }

		//INT
		public RuleCall getColumnsCntINTTerminalRuleCall_30_0() { return cColumnsCntINTTerminalRuleCall_30_0; }

		//"font size"
		public Keyword getFontSizeKeyword_31() { return cFontSizeKeyword_31; }

		//fontSize=FontSize
		public Assignment getFontSizeAssignment_32() { return cFontSizeAssignment_32; }

		//FontSize
		public RuleCall getFontSizeFontSizeParserRuleCall_32_0() { return cFontSizeFontSizeParserRuleCall_32_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_33() { return cRightCurlyBracketKeyword_33; }
	}

	public class FontSizeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FontSize");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cSmallKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cMediumKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cLargeKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		
		//// Nutzer kann auswählen, ob die Schriftgröße klein, medium und groß sein soll. Größe sollte 
		//// abhängig vom gewählten Format festgelegt. 
		//FontSize returns EString:
		//	{EString} "small" | {EString} "medium" | {EString} "large";
		@Override public ParserRule getRule() { return rule; }

		//{EString} "small" | {EString} "medium" | {EString} "large"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EString} "small"
		public Group getGroup_0() { return cGroup_0; }

		//{EString}
		public Action getEStringAction_0_0() { return cEStringAction_0_0; }

		//"small"
		public Keyword getSmallKeyword_0_1() { return cSmallKeyword_0_1; }

		//{EString} "medium"
		public Group getGroup_1() { return cGroup_1; }

		//{EString}
		public Action getEStringAction_1_0() { return cEStringAction_1_0; }

		//"medium"
		public Keyword getMediumKeyword_1_1() { return cMediumKeyword_1_1; }

		//{EString} "large"
		public Group getGroup_2() { return cGroup_2; }

		//{EString}
		public Action getEStringAction_2_0() { return cEStringAction_2_0; }

		//"large"
		public Keyword getLargeKeyword_2_1() { return cLargeKeyword_2_1; }
	}

	public class FormatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Format");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cDINA6Keyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDINA5Keyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cEStringAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cDINA4Keyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cEStringAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cDINA3Keyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Action cEStringAction_4_0 = (Action)cGroup_4.eContents().get(0);
		private final Keyword cDINA2Keyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Action cEStringAction_5_0 = (Action)cGroup_5.eContents().get(0);
		private final Keyword cDINA1Keyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Group cGroup_6 = (Group)cAlternatives.eContents().get(6);
		private final Action cEStringAction_6_0 = (Action)cGroup_6.eContents().get(0);
		private final Keyword cDINA0Keyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		
		//Format returns EString:
		//	{EString} "DIN A6" | {EString} "DIN A5" | {EString} "DIN A4" | {EString} "DIN A3" | {EString} "DIN A2" | {EString}
		//	"DIN A1" | {EString} "DIN A0";
		@Override public ParserRule getRule() { return rule; }

		//{EString} "DIN A6" | {EString} "DIN A5" | {EString} "DIN A4" | {EString} "DIN A3" | {EString} "DIN A2" | {EString}
		//"DIN A1" | {EString} "DIN A0"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EString} "DIN A6"
		public Group getGroup_0() { return cGroup_0; }

		//{EString}
		public Action getEStringAction_0_0() { return cEStringAction_0_0; }

		//"DIN A6"
		public Keyword getDINA6Keyword_0_1() { return cDINA6Keyword_0_1; }

		//{EString} "DIN A5"
		public Group getGroup_1() { return cGroup_1; }

		//{EString}
		public Action getEStringAction_1_0() { return cEStringAction_1_0; }

		//"DIN A5"
		public Keyword getDINA5Keyword_1_1() { return cDINA5Keyword_1_1; }

		//{EString} "DIN A4"
		public Group getGroup_2() { return cGroup_2; }

		//{EString}
		public Action getEStringAction_2_0() { return cEStringAction_2_0; }

		//"DIN A4"
		public Keyword getDINA4Keyword_2_1() { return cDINA4Keyword_2_1; }

		//{EString} "DIN A3"
		public Group getGroup_3() { return cGroup_3; }

		//{EString}
		public Action getEStringAction_3_0() { return cEStringAction_3_0; }

		//"DIN A3"
		public Keyword getDINA3Keyword_3_1() { return cDINA3Keyword_3_1; }

		//{EString} "DIN A2"
		public Group getGroup_4() { return cGroup_4; }

		//{EString}
		public Action getEStringAction_4_0() { return cEStringAction_4_0; }

		//"DIN A2"
		public Keyword getDINA2Keyword_4_1() { return cDINA2Keyword_4_1; }

		//{EString} "DIN A1"
		public Group getGroup_5() { return cGroup_5; }

		//{EString}
		public Action getEStringAction_5_0() { return cEStringAction_5_0; }

		//"DIN A1"
		public Keyword getDINA1Keyword_5_1() { return cDINA1Keyword_5_1; }

		//{EString} "DIN A0"
		public Group getGroup_6() { return cGroup_6; }

		//{EString}
		public Action getEStringAction_6_0() { return cEStringAction_6_0; }

		//"DIN A0"
		public Keyword getDINA0Keyword_6_1() { return cDINA0Keyword_6_1; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDayINTTerminalRuleCall_1_0 = (RuleCall)cDayAssignment_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMonthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cMonthINTTerminalRuleCall_3_0 = (RuleCall)cMonthAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cYearAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cYearINTTerminalRuleCall_5_0 = (RuleCall)cYearAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Date:
		//	"{" day=INT "-" month=INT "-" year=INT "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" day=INT "-" month=INT "-" year=INT "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//day=INT
		public Assignment getDayAssignment_1() { return cDayAssignment_1; }

		//INT
		public RuleCall getDayINTTerminalRuleCall_1_0() { return cDayINTTerminalRuleCall_1_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//month=INT
		public Assignment getMonthAssignment_3() { return cMonthAssignment_3; }

		//INT
		public RuleCall getMonthINTTerminalRuleCall_3_0() { return cMonthINTTerminalRuleCall_3_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_4() { return cHyphenMinusKeyword_4; }

		//year=INT
		public Assignment getYearAssignment_5() { return cYearAssignment_5; }

		//INT
		public RuleCall getYearINTTerminalRuleCall_5_0() { return cYearINTTerminalRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class LanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEnglishKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cGermanKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Language returns EString:
		//	{EString} "English" | {EString} "German";
		@Override public ParserRule getRule() { return rule; }

		//{EString} "English" | {EString} "German"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EString} "English"
		public Group getGroup_0() { return cGroup_0; }

		//{EString}
		public Action getEStringAction_0_0() { return cEStringAction_0_0; }

		//"English"
		public Keyword getEnglishKeyword_0_1() { return cEnglishKeyword_0_1; }

		//{EString} "German"
		public Group getGroup_1() { return cGroup_1; }

		//{EString}
		public Action getEStringAction_1_0() { return cEStringAction_1_0; }

		//"German"
		public Keyword getGermanKeyword_1_1() { return cGermanKeyword_1_1; }
	}

	public class PriceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Price");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cCurrencyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCurrencyCurrencyParserRuleCall_2_0 = (RuleCall)cCurrencyAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Price:
		//	"{" value=Value currency=Currency "}";
		@Override public ParserRule getRule() { return rule; }

		//"{" value=Value currency=Currency "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//value=Value
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_1_0() { return cValueValueParserRuleCall_1_0; }

		//currency=Currency
		public Assignment getCurrencyAssignment_2() { return cCurrencyAssignment_2; }

		//Currency
		public RuleCall getCurrencyCurrencyParserRuleCall_2_0() { return cCurrencyCurrencyParserRuleCall_2_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Keyword cCommaKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Value:
		//	INT ("." | ",") INT;
		@Override public ParserRule getRule() { return rule; }

		//INT ("." | ",") INT
		public Group getGroup() { return cGroup; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//"." | ","
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//","
		public Keyword getCommaKeyword_1_1() { return cCommaKeyword_1_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}

	public class CurrencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Currency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cEStringAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cEuroKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cEStringAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cDollarKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Currency returns EString:
		//	{EString} "Euro [€]" | {EString} "Dollar [$]";
		@Override public ParserRule getRule() { return rule; }

		//{EString} "Euro [€]" | {EString} "Dollar [$]"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{EString} "Euro [€]"
		public Group getGroup_0() { return cGroup_0; }

		//{EString}
		public Action getEStringAction_0_0() { return cEStringAction_0_0; }

		//"Euro [€]"
		public Keyword getEuroKeyword_0_1() { return cEuroKeyword_0_1; }

		//{EString} "Dollar [$]"
		public Group getGroup_1() { return cGroup_1; }

		//{EString}
		public Action getEStringAction_1_0() { return cEStringAction_1_0; }

		//"Dollar [$]"
		public Keyword getDollarKeyword_1_1() { return cDollarKeyword_1_1; }
	}

	public class TopicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Topic");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTopicKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTagsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTagsTopicTagParserRuleCall_3_0 = (RuleCall)cTagsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaSpaceKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTagsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTagsTopicTagParserRuleCall_4_1_0 = (RuleCall)cTagsAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Topic:
		//	"topic" name=ID "{" tags+=TopicTag (", " tags+=TopicTag)* "}";
		@Override public ParserRule getRule() { return rule; }

		//"topic" name=ID "{" tags+=TopicTag (", " tags+=TopicTag)* "}"
		public Group getGroup() { return cGroup; }

		//"topic"
		public Keyword getTopicKeyword_0() { return cTopicKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//tags+=TopicTag
		public Assignment getTagsAssignment_3() { return cTagsAssignment_3; }

		//TopicTag
		public RuleCall getTagsTopicTagParserRuleCall_3_0() { return cTagsTopicTagParserRuleCall_3_0; }

		//(", " tags+=TopicTag)*
		public Group getGroup_4() { return cGroup_4; }

		//", "
		public Keyword getCommaSpaceKeyword_4_0() { return cCommaSpaceKeyword_4_0; }

		//tags+=TopicTag
		public Assignment getTagsAssignment_4_1() { return cTagsAssignment_4_1; }

		//TopicTag
		public RuleCall getTagsTopicTagParserRuleCall_4_1_0() { return cTagsTopicTagParserRuleCall_4_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TopicTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TopicTag");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//TopicTag:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class PairElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Pair");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyIDTerminalRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		////terminal PREIS: 
		////	('0'..'9')+(','|'.')*('0'..'9')*
		////;
		//Pair:
		//	key=ID ":" value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//key=ID ":" value=STRING
		public Group getGroup() { return cGroup; }

		//key=ID
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//ID
		public RuleCall getKeyIDTerminalRuleCall_0_0() { return cKeyIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//value=STRING
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0() { return cValueSTRINGTerminalRuleCall_2_0; }
	}
	
	
	private final DeclarationElements pDeclaration;
	private final FontSizeElements pFontSize;
	private final FormatElements pFormat;
	private final DateElements pDate;
	private final LanguageElements pLanguage;
	private final PriceElements pPrice;
	private final ValueElements pValue;
	private final CurrencyElements pCurrency;
	private final TopicElements pTopic;
	private final TopicTagElements pTopicTag;
	private final PairElements pPair;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public NplGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDeclaration = new DeclarationElements();
		this.pFontSize = new FontSizeElements();
		this.pFormat = new FormatElements();
		this.pDate = new DateElements();
		this.pLanguage = new LanguageElements();
		this.pPrice = new PriceElements();
		this.pValue = new ValueElements();
		this.pCurrency = new CurrencyElements();
		this.pTopic = new TopicElements();
		this.pTopicTag = new TopicTagElements();
		this.pPair = new PairElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.tu_bs.cs.isf.mbse.mbtimes.Npl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Declaration:
	//	"newspaper" name=ID "{" "feed links" "{" feedlinks+=Pair (", " pairs+=Pair)* "}" "topics" "{" topics+=Topic
	//	topics+=Topic* "}" ("date" date=Date)? ("location" location=STRING)? "price" price=Price ("volume" volume=INT)?
	//	"language" language=Language "format" format=Format "number of articles per topic" articleCnt=INT
	//	"number of words per article" articleCharMin=INT "-" articleCharMax=INT ("number of images per article"
	//	imagesCnt=INT)? "number of columns" columnsCnt=INT "font size" fontSize=FontSize "}";
	public DeclarationElements getDeclarationAccess() {
		return pDeclaration;
	}
	
	public ParserRule getDeclarationRule() {
		return getDeclarationAccess().getRule();
	}

	//// Nutzer kann auswählen, ob die Schriftgröße klein, medium und groß sein soll. Größe sollte 
	//// abhängig vom gewählten Format festgelegt. 
	//FontSize returns EString:
	//	{EString} "small" | {EString} "medium" | {EString} "large";
	public FontSizeElements getFontSizeAccess() {
		return pFontSize;
	}
	
	public ParserRule getFontSizeRule() {
		return getFontSizeAccess().getRule();
	}

	//Format returns EString:
	//	{EString} "DIN A6" | {EString} "DIN A5" | {EString} "DIN A4" | {EString} "DIN A3" | {EString} "DIN A2" | {EString}
	//	"DIN A1" | {EString} "DIN A0";
	public FormatElements getFormatAccess() {
		return pFormat;
	}
	
	public ParserRule getFormatRule() {
		return getFormatAccess().getRule();
	}

	//Date:
	//	"{" day=INT "-" month=INT "-" year=INT "}";
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//Language returns EString:
	//	{EString} "English" | {EString} "German";
	public LanguageElements getLanguageAccess() {
		return pLanguage;
	}
	
	public ParserRule getLanguageRule() {
		return getLanguageAccess().getRule();
	}

	//Price:
	//	"{" value=Value currency=Currency "}";
	public PriceElements getPriceAccess() {
		return pPrice;
	}
	
	public ParserRule getPriceRule() {
		return getPriceAccess().getRule();
	}

	//Value:
	//	INT ("." | ",") INT;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Currency returns EString:
	//	{EString} "Euro [€]" | {EString} "Dollar [$]";
	public CurrencyElements getCurrencyAccess() {
		return pCurrency;
	}
	
	public ParserRule getCurrencyRule() {
		return getCurrencyAccess().getRule();
	}

	//Topic:
	//	"topic" name=ID "{" tags+=TopicTag (", " tags+=TopicTag)* "}";
	public TopicElements getTopicAccess() {
		return pTopic;
	}
	
	public ParserRule getTopicRule() {
		return getTopicAccess().getRule();
	}

	//TopicTag:
	//	value=STRING;
	public TopicTagElements getTopicTagAccess() {
		return pTopicTag;
	}
	
	public ParserRule getTopicTagRule() {
		return getTopicTagAccess().getRule();
	}

	////terminal PREIS: 
	////	('0'..'9')+(','|'.')*('0'..'9')*
	////;
	//Pair:
	//	key=ID ":" value=STRING;
	public PairElements getPairAccess() {
		return pPair;
	}
	
	public ParserRule getPairRule() {
		return getPairAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

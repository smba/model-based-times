/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.mbse.mbtimes.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Date;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Declaration;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Feedlinks;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.NplPackage;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Pair;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Price;
import de.tu_bs.cs.isf.mbse.mbtimes.services.NplGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NplSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NplGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == NplPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case NplPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case NplPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case NplPackage.FEEDLINKS:
				sequence_Feedlinks(context, (Feedlinks) semanticObject); 
				return; 
			case NplPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case NplPackage.PRICE:
				sequence_Price(context, (Price) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     (day=INT month=INT year=INT)
	 */
	protected void sequence_Date(EObject context, Date semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__DAY));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__MONTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__MONTH));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__YEAR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDateAccess().getDayINTTerminalRuleCall_1_0(), semanticObject.getDay());
		feeder.accept(grammarAccess.getDateAccess().getMonthINTTerminalRuleCall_3_0(), semanticObject.getMonth());
		feeder.accept(grammarAccess.getDateAccess().getYearINTTerminalRuleCall_5_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         feedlinks=Feedlinks 
	 *         topics=Topics 
	 *         date=Date 
	 *         location=STRING 
	 *         price=Price 
	 *         volume=INT 
	 *         language=Language 
	 *         format=Format 
	 *         article_cnt=INT 
	 *         article_char_min=INT 
	 *         article_char_max=INT 
	 *         article_images=INT 
	 *         columns_cnt=INT 
	 *         font_size=INT
	 *     )
	 */
	protected void sequence_Declaration(EObject context, Declaration semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__NAME));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__FEEDLINKS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__FEEDLINKS));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__TOPICS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__TOPICS));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__DATE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__DATE));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__LOCATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__LOCATION));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__PRICE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__PRICE));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__VOLUME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__VOLUME));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__LANGUAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__LANGUAGE));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__FORMAT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__FORMAT));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CNT));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CHAR_MIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CHAR_MIN));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CHAR_MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_CHAR_MAX));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_IMAGES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__ARTICLE_IMAGES));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__COLUMNS_CNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__COLUMNS_CNT));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DECLARATION__FONT_SIZE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DECLARATION__FONT_SIZE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDeclarationAccess().getNameSTRINGTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDeclarationAccess().getFeedlinksFeedlinksParserRuleCall_3_0(), semanticObject.getFeedlinks());
		feeder.accept(grammarAccess.getDeclarationAccess().getTopicsTopicsParserRuleCall_5_0(), semanticObject.getTopics());
		feeder.accept(grammarAccess.getDeclarationAccess().getDateDateParserRuleCall_7_0(), semanticObject.getDate());
		feeder.accept(grammarAccess.getDeclarationAccess().getLocationSTRINGTerminalRuleCall_9_0(), semanticObject.getLocation());
		feeder.accept(grammarAccess.getDeclarationAccess().getPricePriceParserRuleCall_11_0(), semanticObject.getPrice());
		feeder.accept(grammarAccess.getDeclarationAccess().getVolumeINTTerminalRuleCall_13_0(), semanticObject.getVolume());
		feeder.accept(grammarAccess.getDeclarationAccess().getLanguageLanguageParserRuleCall_15_0(), semanticObject.getLanguage());
		feeder.accept(grammarAccess.getDeclarationAccess().getFormatFormatParserRuleCall_17_0(), semanticObject.getFormat());
		feeder.accept(grammarAccess.getDeclarationAccess().getArticle_cntINTTerminalRuleCall_19_0(), semanticObject.getArticle_cnt());
		feeder.accept(grammarAccess.getDeclarationAccess().getArticle_char_minINTTerminalRuleCall_21_0(), semanticObject.getArticle_char_min());
		feeder.accept(grammarAccess.getDeclarationAccess().getArticle_char_maxINTTerminalRuleCall_23_0(), semanticObject.getArticle_char_max());
		feeder.accept(grammarAccess.getDeclarationAccess().getArticle_imagesINTTerminalRuleCall_25_0(), semanticObject.getArticle_images());
		feeder.accept(grammarAccess.getDeclarationAccess().getColumns_cntINTTerminalRuleCall_27_0(), semanticObject.getColumns_cnt());
		feeder.accept(grammarAccess.getDeclarationAccess().getFont_sizeINTTerminalRuleCall_29_0(), semanticObject.getFont_size());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (pairs+=Pair pairs+=Pair*)
	 */
	protected void sequence_Feedlinks(EObject context, Feedlinks semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (key=STRING value=STRING)
	 */
	protected void sequence_Pair(EObject context, Pair semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PAIR__KEY));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PAIR__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPairAccess().getKeySTRINGTerminalRuleCall_1_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPairAccess().getValueSTRINGTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (value=STRING currency=Currency)
	 */
	protected void sequence_Price(EObject context, Price semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PRICE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PRICE__VALUE));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PRICE__CURRENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PRICE__CURRENCY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPriceAccess().getValueSTRINGTerminalRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getPriceAccess().getCurrencyCurrencyParserRuleCall_2_0(), semanticObject.getCurrency());
		feeder.finish();
	}
}

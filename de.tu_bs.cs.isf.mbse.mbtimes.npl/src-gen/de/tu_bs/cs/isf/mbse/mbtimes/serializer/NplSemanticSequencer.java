/*
 * generated by Xtext
 */
package de.tu_bs.cs.isf.mbse.mbtimes.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Date;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Declaration;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.EString;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.ImagesCount;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.NplPackage;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Pair;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Price;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Topic;
import de.tu_bs.cs.isf.mbse.mbtimes.npl.TopicTag;
import de.tu_bs.cs.isf.mbse.mbtimes.services.NplGrammarAccess;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticNodeProvider.INodesForEObjectProvider;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class NplSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private NplGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == NplPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case NplPackage.DATE:
				sequence_Date(context, (Date) semanticObject); 
				return; 
			case NplPackage.DECLARATION:
				sequence_Declaration(context, (Declaration) semanticObject); 
				return; 
			case NplPackage.ESTRING:
				sequence_Currency_FontSize_Format_Language(context, (EString) semanticObject); 
				return; 
			case NplPackage.IMAGES_COUNT:
				sequence_ImagesCount(context, (ImagesCount) semanticObject); 
				return; 
			case NplPackage.PAIR:
				sequence_Pair(context, (Pair) semanticObject); 
				return; 
			case NplPackage.PRICE:
				sequence_Price(context, (Price) semanticObject); 
				return; 
			case NplPackage.TOPIC:
				sequence_Topic(context, (Topic) semanticObject); 
				return; 
			case NplPackage.TOPIC_TAG:
				sequence_TopicTag(context, (TopicTag) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     {EString}
	 */
	protected void sequence_Currency_FontSize_Format_Language(EObject context, EString semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (day=INT month=INT year=INT)
	 */
	protected void sequence_Date(EObject context, Date semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__DAY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__DAY));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__MONTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__MONTH));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.DATE__YEAR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.DATE__YEAR));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getDateAccess().getDayINTTerminalRuleCall_1_0(), semanticObject.getDay());
		feeder.accept(grammarAccess.getDateAccess().getMonthINTTerminalRuleCall_3_0(), semanticObject.getMonth());
		feeder.accept(grammarAccess.getDateAccess().getYearINTTerminalRuleCall_5_0(), semanticObject.getYear());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         feedlinks+=Pair 
	 *         pairs+=Pair* 
	 *         topics+=Topic 
	 *         topics+=Topic* 
	 *         date=Date? 
	 *         location=STRING? 
	 *         price=Price 
	 *         volume=INT? 
	 *         language=Language 
	 *         format=Format 
	 *         articleCnt=INT 
	 *         articleWordsMin=INT 
	 *         articleWordsMax=INT 
	 *         imagesCnt=ImagesCount? 
	 *         columnsCnt=INT 
	 *         fontSize=FontSize
	 *     )
	 */
	protected void sequence_Declaration(EObject context, Declaration semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=INT
	 */
	protected void sequence_ImagesCount(EObject context, ImagesCount semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.IMAGES_COUNT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.IMAGES_COUNT__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getImagesCountAccess().getValueINTTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (key=ID value=URL)
	 */
	protected void sequence_Pair(EObject context, Pair semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PAIR__KEY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PAIR__KEY));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PAIR__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PAIR__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPairAccess().getKeyIDTerminalRuleCall_0_0(), semanticObject.getKey());
		feeder.accept(grammarAccess.getPairAccess().getValueURLTerminalRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (value=Float currency=Currency)
	 */
	protected void sequence_Price(EObject context, Price semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PRICE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PRICE__VALUE));
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.PRICE__CURRENCY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.PRICE__CURRENCY));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getPriceAccess().getValueFloatParserRuleCall_1_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getPriceAccess().getCurrencyCurrencyParserRuleCall_2_0(), semanticObject.getCurrency());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_TopicTag(EObject context, TopicTag semanticObject) {
		if(errorAcceptor != null) {
			if(transientValues.isValueTransient(semanticObject, NplPackage.Literals.TOPIC_TAG__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, NplPackage.Literals.TOPIC_TAG__VALUE));
		}
		INodesForEObjectProvider nodes = createNodeProvider(semanticObject);
		SequenceFeeder feeder = createSequencerFeeder(semanticObject, nodes);
		feeder.accept(grammarAccess.getTopicTagAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID tags+=TopicTag tags+=TopicTag*)
	 */
	protected void sequence_Topic(EObject context, Topic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
}

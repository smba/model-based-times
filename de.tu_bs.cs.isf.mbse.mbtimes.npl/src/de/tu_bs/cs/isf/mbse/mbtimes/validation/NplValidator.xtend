/*
 * generated by Xtext
 * 
 */
package de.tu_bs.cs.isf.mbse.mbtimes.validation

import de.tu_bs.cs.isf.mbse.mbtimes.npl.Date
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Declaration
import de.tu_bs.cs.isf.mbse.mbtimes.npl.ImagesCount
import de.tu_bs.cs.isf.mbse.mbtimes.npl.NplPackage
import de.tu_bs.cs.isf.mbse.mbtimes.npl.Price
import java.util.Arrays
import org.eclipse.xtext.validation.Check

/**
 * This class contains different constraints for the defined DSL. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class NplValidator extends AbstractNplValidator {

	/**
	 * This constraint checks whether the newspaper name contains less than 21 characters.
	 */
	@Check
	def checkNewspaperDeclarationLength(Declaration declaration) {
		if (declaration.name.length > 20) {
			error("A newspaper declaration name must not be longer than 20 characters.", NplPackage.Literals.DECLARATION__NAME)
		}
	}
	
	/**
	 * This constraint checks whether at least one topic or not more than 12 topics have been defined.
	 */
	 @Check
	 def checkNumberOfTopics(Declaration declaration) {
	 	if (declaration.topics.empty) {
	 		error("Please specify at least one topic!", NplPackage.Literals.DECLARATION__TOPICS)
	 	} else if (declaration.topics.size > 12) {
	 		error("Please do not specify more than twelve topics!", NplPackage.Literals.DECLARATION__TOPICS)
	 	}
	 } 
	

	/**
	 * This constraint checks whether the date specified by day, month and year is valid.
	 */
	@Check
	def checkDate(Date date) {
		var int[] days30 = #[4,6,9,11];
		if (date.month < 1 || date.month > 12) {
			error("Number " + date.month + " does not refer to any valid month.", NplPackage.Literals.DATE__MONTH)
		} 
		if (date.day < 1) {
			error("Please enter a positive number.", NplPackage.Literals.DATE__DAY)
		}
		if (date.month.equals(2)) {
			if (date.year % 4 == 0 && date.day > 29) {
				error("In a leap-year, february has 29 days.", NplPackage.Literals.DATE__DAY)
			} else if (date.day > 28) {
				error("Usually, february has 28 days.", NplPackage.Literals.DATE__DAY)
			}
		} else {
			if (Arrays.asList(days30).contains(date.month) && (date.day > 30)) {
				error("This month has only 30 days.", NplPackage.Literals.DATE__DAY)
			} else if (date.day > 31) {
				error("This month has only 31 days.", NplPackage.Literals.DATE__DAY)
			}
			
			if (date.month == 12 && date.day < 27 && date.day > 23) {
				warning("Merry Christmas! :)", NplPackage.Literals.DATE__DAY)
			} 
		}
	}
	
	/**
	 * This constraint checks whether the number of articles is positive and smaller than 6.
	 */
	@Check
	def checkNrArticles(Declaration declaration) {
		if (declaration.articleCnt < 1 || declaration.articleCnt > 5) {
			error("Number of articles must be greater than 0 and smaller than 6", NplPackage.Literals.DECLARATION__ARTICLE_CNT)
		}
	}
	 
	 /**
	  * This constraint checks whether the inserted number of words in an article is positive and if maximum number
	  * of words is greater than minimum number of words.
	  */
	 @Check
	 def checkNumberOfWords(Declaration declaration) {
	 	if (declaration.articleWordsMin < 1) {
	 		error("The minimum number of words could not be smaller than 1", NplPackage.Literals.DECLARATION__ARTICLE_WORDS_MIN)
	 	}
	 	if (declaration.articleWordsMin > declaration.articleWordsMax) {
	 		error("Please re-consider your maximum and minimum values.", NplPackage.Literals.DECLARATION__ARTICLE_WORDS_MAX)
	 	}
	 }
	 
	 /**
	 * This constraint checks whether the number of images is positive and smaller than 6.
	 */
	@Check
	def checkNrImages(Declaration declaration) {
		if (declaration.imagesCnt.value < 1 || declaration.imagesCnt.value > 5) {
			error("Number of images must be greater than 0 and smaller than 6", NplPackage.Literals.DECLARATION__IMAGES_CNT)
		}
	}
	 
	/**
	 * This constraint checks whether the number of images is positive and smaller than 6. 
	 */
	 @Check
	 def checkNumberOfColumns(Declaration declaration) {
	 	if (declaration.columnsCnt < 1 || declaration.columnsCnt > 10) {
	 		error("Number of Columns must be greater than 0 and smaller than 11", NplPackage.Literals.DECLARATION__COLUMNS_CNT)
	 	}
	 	if (declaration.columnsCnt > 3) {
	 		warning("You'll have a big newspaper, huh?", NplPackage.Literals.DECLARATION__COLUMNS_CNT)
	 	}
	 }
	 
	 @Check
	 def checkPrice(Declaration declaration) {
	 	if (declaration.price.value < 0) {
	 		error("You should pay for the newspaper, not us ;)", NplPackage.Literals.PRICE__VALUE);
	 	}
	 	if (Float.toString(declaration.price.value).split("\\.").get(1).length() > 2) {
	 		warning("We only consider two decimal places.", NplPackage.Literals.PRICE__VALUE);
	 	}
	 }

//  public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					MyDslPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
}
